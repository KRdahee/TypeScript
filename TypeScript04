[클래스]
클래스(class)란 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용됩니다

지시사항
1. my name is + name을 호출하는 say() 함수를 구현하세요.
2. new를 사용하여 Person의 인스턴스를 생성하세요.
3. person.say()를 호출해서 my name is 엘리스를 콘솔 화면에 출력하세요.

class Person {
  name: string
  
  constructor(name: string) {
    this.name = name
  }
  
  // "my name is" + this.name을 출력하는 say() 함수를 완성하세요.
  say() { console.log("my name is " + this.name)
  }
}

// Person 클래스의 인스턴스를 생성하여 "my name is 엘리스"가 출력되도록 say() 함수를 호출하세요.
const person = new Person("엘리스");
person.say();

[접근 제어자]
접근 제어자는 클래스 멤버를 클래스 외부에서 허용 또는 차단할때 사용합니다.

지시사항
1. Dog 클래스는 Animal 클래스를 상속 받습니다.
2. Animal 클래스 필드 name 접근 제어자를 수정하여 코드가 정상 동작하게 해주세요.
class Animal {
  // 코드가 정상 동작 할수 있게 접근제어자를 수정해주세요.
    protected name: string

  constructor(name: string) {
    this.name = name;
  }
}

class Dog extends Animal {
  constructor(name: string) {
    super(name);    
  }
  
  makeSound() {
    console.log(this.name + " 멍멍!!")
  }
}

const dog = new Dog("진돗개")
dog.makeSound() // 진돗개 멍멍!! 출력

[static]
static은 각 인스턴스가 아닌 클래스 자체에서 보이는 전역 멤버를 생성합니다. 그래서 범용적으로 사용되는 값에 static을 설정하여 사용합니다.

지시사항
1. Grid 클래스의 필드 origin 값이 외부에서 변경이 가능하도록 전역 멤버로 변경해주세요.
class Grid {
  // origin 필드를 전역 멤버로 변경해주세요.
  static origin = { x:0, y:0 }
  
  // orign 필드 값을 출력할 수 있도록 아래 코드를 수정하세요.
  calculateDistance(): void {
    console.log(Grid.origin.x * Grid.origin.y);
  }
}

const grid = new Grid();

// 외부에서 Grid origin 값 변경
Grid.origin = { x:3, y:3 } 
grid.calculateDistance(); // "9" 출력

[추상 클래스 (abstract class)]
추상 클래스는 다른 클래스들이 파생될 수 있는 기초 클래스를 말합니다.
추상 클래스는 직접 인스턴스화 불가능합니다.
abstract 키워드는 추상 클래스뿐만 아니라 추상 클래스 내에서 추상 메소드를 정의하는 데 사용합니다.
추상 클래스 내에서 추상으로 표시된 메소드는 구현을 포함하지 않으며, 파생된 클래스에서 구현이 필수입니다.

지시사항
1. Dog 클래스를 생성해서 추상 메소드 makeSound를 구현해주세요.
2. dog.makeSound() 를 구현 호출해서 진돗개 멍멍!!이 콘솔화면에 나올 수 있게 작성해주세요.
3. 진돗개 값은 Animal 클래스 name 필드에 할당해서 호출해주세요.

abstract class Animal {
  protected name: string

  constructor(name: string) {
    this.name = name
  }

  abstract makeSound(): void
}

class Dog extends Animal {
  // constructor를 구현해주세요
   constructor(name : string){
       super(name);
   }
    makeSound(): void{
       console.log(this.name + "멍멍!!")
   }
}

const dog = new Dog("진돗개")
dog.makeSound() // 진돗개 멍멍!!
